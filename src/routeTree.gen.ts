/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const SerialsLazyImport = createFileRoute('/serials')()
const MoviesLazyImport = createFileRoute('/movies')()
const CartoonsLazyImport = createFileRoute('/cartoons')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SerialsLazyRoute = SerialsLazyImport.update({
  path: '/serials',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/serials.lazy').then((d) => d.Route))

const MoviesLazyRoute = MoviesLazyImport.update({
  path: '/movies',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/movies.lazy').then((d) => d.Route))

const CartoonsLazyRoute = CartoonsLazyImport.update({
  path: '/cartoons',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/cartoons.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/cartoons': {
      id: '/cartoons'
      path: '/cartoons'
      fullPath: '/cartoons'
      preLoaderRoute: typeof CartoonsLazyImport
      parentRoute: typeof rootRoute
    }
    '/movies': {
      id: '/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesLazyImport
      parentRoute: typeof rootRoute
    }
    '/serials': {
      id: '/serials'
      path: '/serials'
      fullPath: '/serials'
      preLoaderRoute: typeof SerialsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/cartoons': typeof CartoonsLazyRoute
  '/movies': typeof MoviesLazyRoute
  '/serials': typeof SerialsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/cartoons': typeof CartoonsLazyRoute
  '/movies': typeof MoviesLazyRoute
  '/serials': typeof SerialsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/cartoons': typeof CartoonsLazyRoute
  '/movies': typeof MoviesLazyRoute
  '/serials': typeof SerialsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/cartoons' | '/movies' | '/serials'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/cartoons' | '/movies' | '/serials'
  id: '__root__' | '/' | '/cartoons' | '/movies' | '/serials'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CartoonsLazyRoute: typeof CartoonsLazyRoute
  MoviesLazyRoute: typeof MoviesLazyRoute
  SerialsLazyRoute: typeof SerialsLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CartoonsLazyRoute: CartoonsLazyRoute,
  MoviesLazyRoute: MoviesLazyRoute,
  SerialsLazyRoute: SerialsLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cartoons",
        "/movies",
        "/serials"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/cartoons": {
      "filePath": "cartoons.lazy.tsx"
    },
    "/movies": {
      "filePath": "movies.lazy.tsx"
    },
    "/serials": {
      "filePath": "serials.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
